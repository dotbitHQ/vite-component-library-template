import { ChangeEvent, useCallback, useRef, useState } from 'react'
import {
  Button,
  ButtonShape,
  ButtonSize,
  LoadingIcon,
  PasteIcon,
  ScanIcon,
  SwapTransition,
  WarningOutlineIcon,
} from '../../components'
import { useSimpleRouter } from '../../components/SimpleRouter'
import { Result } from '@zxing/library'
import clsx from 'clsx'
import { QrCodeScanner, getCamera } from '../../components/QrCodeScanner/new'
import { ConnectDID } from 'connect-did-sdk'

function exceptionToMessage(err: DOMException) {
  if (err.name === 'NotAllowedError') {
    return {
      title: 'No Camera Permission',
      desc: 'Scanning QR code requires access to the camera. Please enable camera permission.',
    }
  } else if (err.name === 'NotFoundError') {
    return {
      title: 'No Camera Found',
      desc: 'No available camera was found to scan QR code. Please try pasting the data directly.',
    }
  } else {
    return {
      title: 'Unknown Error',
      desc: 'Unknown error happened. Please try again or paste the data directly.',
    }
  }
}

function DomException({ err, className }: { err: DOMException; className?: string }) {
  const { title, desc } = exceptionToMessage(err)
  return (
    <div
      className={clsx(
        'flex w-full flex-row items-start justify-start gap-2 rounded-xl border border-amber-300 border-opacity-40 bg-amber-300 bg-opacity-5 p-3',
        className,
      )}
    >
      <WarningOutlineIcon className="h-5 w-5 flex-none text-yellow-500" />

      <div className="flex-1">
        <div className="text-[16px] leading-[20px] text-yellow-700">{title}</div>
        <div className="shrink grow basis-0 text-[14px] font-normal text-yellow-700">{desc}</div>
      </div>
    </div>
  )
}

const connectDID = new ConnectDID()

function verifyData(data: string) {
  let result = true
  try {
    connectDID.decodeQRCode(data)
  } catch (err) {
    result = false
  }
  return result
}

export function InputSignature() {
  const goNext = useSimpleRouter()?.goNext
  const [data, setData] = useState('')
  const [permissionError, setPermissionError] = useState<DOMException | undefined>(undefined)
  const [requiringPermission, setRequiringPermission] = useState(false)
  const [media, setMedia] = useState<MediaStream | null>(null)
  const onChange = useCallback(
    (e: ChangeEvent<HTMLTextAreaElement>) => {
      setData(e.target.value)
    },
    [setData],
  )

  const onSuccess = useCallback(
    (result: Result) => {
      setData(result.getText())
      setRequiringPermission(false)
      setMedia(null)
    },
    [setData],
  )

  const onPaste = useCallback(() => {
    navigator.clipboard.readText().then(setData, console.error)
  }, [setData])

  const onClickScan = useCallback(async () => {
    try {
      setRequiringPermission(true)
      const media = await getCamera({ video: { facingMode: 'environment' } })
      setMedia(media)
    } catch (err) {
      setRequiringPermission(false)
      if (err instanceof DOMException) {
        setPermissionError(err)
      } else {
        console.error(err)
      }
    }
  }, [setPermissionError, setRequiringPermission, setMedia])

  const isValidData = verifyData(data)

  return (
    <div className="relative flex w-full max-w-[400px] flex-col items-center justify-start p-6">
      <SwapTransition duration="duration-300" className="w-full overflow-visible">
        {media ? (
          <QrCodeScanner
            key={1}
            stream={media}
            className={clsx('h-[400px] w-full rounded-xl bg-black')}
            onSuccess={onSuccess}
          />
        ) : (
          <div key={2} className={clsx('flex w-full flex-col items-center justify-start')}>
            <div className="text-center text-[14px] leading-tight text-neutral-700">
              Scan the QR code generated by your another device using this device, or paste the data here.
            </div>
            <div className="relative mt-6 w-full">
              <textarea
                className="block h-[108px] w-full resize-none rounded-xl border border-stone-300 border-opacity-20 bg-neutral-100 py-3 pl-4 pr-3 text-[16px] text-neutral-700 focus:border-emerald-400 focus:bg-white focus:outline-offset-1 focus:outline-emerald-400/20 focus:ring-0"
                placeholder="Paste data or scan QR code"
                value={data}
                onChange={onChange}
              />
              <div className="absolute bottom-0 right-0 inline-block p-3">
                <PasteIcon onClick={onPaste} className="w-[21px] cursor-pointer" />
                {requiringPermission ? (
                  <LoadingIcon className="animation-rotate-360-deg ml-4 w-[23px] cursor-pointer" />
                ) : (
                  <ScanIcon onClick={onClickScan} className="ml-4 w-[23px] cursor-pointer" />
                )}
              </div>
            </div>
            {data.length > 0 && !isValidData && (
              <div className="mt-1 w-full text-[14px] font-normal text-red-400">Incorrect data</div>
            )}
            {permissionError && <DomException className="mt-6" err={permissionError} />}
            <Button
              disabled={data.length === 0 || !isValidData}
              className="m-6 w-full px-5"
              size={ButtonSize.middle}
              shape={ButtonShape.round}
              onClick={() =>
                goNext && goNext((state) => ({ ...(state ?? {}), backupDeviceData: connectDID.decodeQRCode(data) }))
              }
            >
              Next
            </Button>
          </div>
        )}
      </SwapTransition>
    </div>
  )
}
