name: CD
on: 
  # Only trigger CD when CI workflow completed.
  workflow_run:
    workflows: [CI]
    types: 
      - completed
jobs:
  # Map current branch to github environment. main -> Prod, other -> Dev
  env_check:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
    steps:
      - name: Check Env Based on Branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "env_name=Prod" >> $GITHUB_OUTPUT
          else
            echo "env_name=Dev" >> $GITHUB_OUTPUT
          fi
  deploy:
    needs: [env_check]
    # Dynamically set the deploy environment
    environment:
      name: ${{ needs.env_check.outputs.env_name }}
    # Only run if CI succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    steps:
      # Get actual artifact filename
      - name: Download Filename
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: CI
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          run_number: ${{ github.event.workflow_run.run_number }}
          name: filename
      - name: Expose Filename
        run: echo "ARTIFACT_FILENAME=$(cat filename)" > $GITHUB_ENV
      # Download the artifact from previous workflow
      - name: Download Artifct
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: CI
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          run_number: ${{ github.event.workflow_run.run_number }}
          name: ${{ env.ARTIFACT_FILENAME }}
      - name: Stop Service
        # SSH_HOST is fetched from Project Settings -> Environment
        run: ssh ${{ vars.SSH_HOST }} 'pm2 delete storybook.d.id2'
      - name: Rsync
        # TARGET_FOLDER is fetched from Project Settings -> Environment
        run: rsync -a das_database_server ${{ vars.SSH_HOST }}:${{ vars.TARGET_FOLDER }}/storybook.d.id2
      - name: npm install
        run: ssh ${{ vars.SSH_HOST }}:${{ vars.TARGET_FOLDER }}/storybook.d.id 'npm install'
      - name: Restart Service
        run: ssh ${{ vars.SSH_HOST }}:${{ vars.TARGET_FOLDER }}/storybook.d.id 'pm2 start npm --name "storybook.d.id2" -- run dev'